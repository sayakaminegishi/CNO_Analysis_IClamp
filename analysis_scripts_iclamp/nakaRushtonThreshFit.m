
function [fitresult, gof] = nakaRushtonThreshFit(c, r)
%CREATEFIT(C,R)
%  Fit the data 'c' and 'r' to a non-linear model.  The model
%  function has the form:
%  R(c) = rectify(c-t) .* Rm * (c-t) ./(b+rectify(c-t))
%  where:
%       rectify(x) = x if x > 0, and 0 otherwise
%       Rm > 0
%       b > 0
%       0 <= t < median(c)
%
%  Input:
%       c:  predictor data, assumed to be a column vector.
%       r:  response data, assumed to be a column vector.
%
%  Output:
%       fitresult: a fit object representing the fit.
%       gof:       structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 11-Apr-2024 16:17:15
%  Modified by User to add constraints and handle errors

%% Input Data
%  Assure that the input data are column vectors
c = c(:);
r = r(:);

%  Check that input vectors have same length.
if length(c) ~= length(r)
    error('Input vectors c and r must have the same length.');
end

% Remove any NaN values
nan_idx = isnan(c) | isnan(r);
c = c(~nan_idx);
r = r(~nan_idx);

%% Set up the fitting problem.
%  Construct a fit object and specify the data to fit.
ft = fittype('rectify(c-t)*Rm./(b+rectify(c-t))',...
    'independent', 'c',...
    'dependent',  'r');

% Calculate a reasonable upper bound for 't'
t_upper = median(c);
if isempty(t_upper)
     error('Input vector c must have at least one element.');
end

% Set the start point.
startpoints = [0.1 0.1 t_upper/2]+0.05*randn(1,3); % Rm, b, t

% Set the constraints.  Make sure these are column vectors.
lowerbounds = [0 0 0];
upperbounds = [Inf Inf t_upper];

% Create the fit options structure.
opts = fitoptions(ft);
opts.StartPoint = startpoints(:);
opts.Lower = lowerbounds(:);
opts.Upper = upperbounds(:);

ft = setoptions(ft,opts);

%% Perform the fit
[fitresult, gof] = fit(c, r, ft, opts);
if isempty(fitresult)
    error('Fit was unsuccessful.  Check data and constraints.');
end
end



function b = rectify(x)
    b = x;
    b(x<0)=0;
end



